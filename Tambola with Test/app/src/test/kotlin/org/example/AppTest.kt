/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.example

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class AppTest {
    @Test
    fun `should return the correct index of row that contains the input number `() {
        val numbersAnnounced = 4
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertEquals(0, markIfPresent(ticket, numbersAnnounced))

    }

    @Test
    fun `should return negative one if ticket does not contains the input `() {
        val numbersAnnounced = 20
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertEquals(-1, markIfPresent(ticket, numbersAnnounced))
    }

    @Test
    fun `should return true when correct top row claim is made`() {
        val numbersAnnounced = arrayListOf(9, 4, 16, 63, 48, 76)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertTrue(rowClaimValidator(ticket, numbersAnnounced, 0))

    }

    @Test
    fun `should return true when correct bottom row claim is made`() {
        val numbersAnnounced = arrayListOf(9, 25, 56, 64, 48, 83)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertTrue(rowClaimValidator(ticket, numbersAnnounced, 2))

    }

    @Test
    fun `should return false when incorrect top row claim is made`() {
        val numbersAnnounced = arrayListOf(9, 4, 16, 63, 48, 76, 23)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertFalse(rowClaimValidator(ticket, numbersAnnounced, 0))

    }

    @Test
    fun `should return false when incorrect bottom row claim is made`() {
        val numbersAnnounced = arrayListOf(9, 25, 56, 64, 48, 83, 12)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertFalse(rowClaimValidator(ticket, numbersAnnounced, 2))

    }

    @Test
    fun `should return true for correct early five numbers claimed`() {
        val numbersAnnounced = arrayListOf(7, 25, 56, 64, 41, 83)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertTrue(firstNumberOfMatchesValidator(ticket, numbersAnnounced, 5))

    }

    @Test
    fun `should return false for incorrect early five numbers claimed`() {
        val numbersAnnounced = arrayListOf(7, 25, 56, 64, 41, 83, 76)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertFalse(firstNumberOfMatchesValidator(ticket, numbersAnnounced, 5))

    }

    @Test
    fun `should return false for incorrect early five numbers claimed late`() {
        val numbersAnnounced = arrayListOf(7, 25, 56, 64, 41, 83, 77)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertFalse(firstNumberOfMatchesValidator(ticket, numbersAnnounced, 5))

    }

    @Test
    fun `should return false for any invalid claim`() {
        val numbersAnnounced = arrayListOf(7, 25, 56, 64, 41, 83, 77)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertFalse(validateClaim("Top Row", ticket, numbersAnnounced))

    }

    @Test
    fun `should return true for correct middle row claim `() {
        val numbersAnnounced = arrayListOf(7, 25, 23, 38, 52, 80)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertTrue(rowClaimValidator(ticket, numbersAnnounced, 1))
    }

    @Test
    fun `should return true for valid middle row claim`() {
        val numbersAnnounced = arrayListOf(7, 25, 23, 38, 52, 80)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertTrue(validateClaim("Middle Row", ticket, numbersAnnounced))

    }

    @Test
    fun `should return true for valid full house claim`() {
        val numbersAnnounced = arrayListOf(4, 16, 48, 63, 76, 7, 23, 38, 52, 80, 9, 25, 56, 64, 83)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertTrue(validateClaim("Full House", ticket, numbersAnnounced))

    }

    @Test
    fun `should return false for invalid full house claim`() {
        val numbersAnnounced = arrayListOf(4, 16, 48, 63, 76, 7, 23, 38, 52, 80, 9, 25, 56)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertFalse(validateClaim("Full House", ticket, numbersAnnounced))

    }

    @Test
    fun `should return false if claim is early five and ticket has both early five and middle row`() {
        val numbersAnnounced = arrayListOf(4, 16, 48, 63, 76, 7, 23, 38, 52, 80)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertFalse(validateClaim("Early Five", ticket, numbersAnnounced))
    }

    @Test
    fun `should return true if claim is middle row and ticket has both early five and middle row`() {
        val numbersAnnounced = arrayListOf(4, 16, 48, 63, 76, 7, 23, 38, 52, 80)
        val ticket = TambolaTicket(
            firstRow = arrayListOf(4, 16, 48, 63, 76),
            secondRow = arrayListOf(7, 23, 38, 52, 80),
            lastRow = arrayListOf(9, 25, 56, 64, 83)
        )
        assertTrue(validateClaim("Middle Row", ticket, numbersAnnounced))
    }
}
